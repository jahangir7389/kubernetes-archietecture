USER: USER WILL COMMUNICATE WITH API SERVER VIA KUBECTL. USER WILL CREATE OR WRITE MANIFEST WRITTEN IN YAML.AND USER WILL APPLY THIS MANIFEST TO CLUSTER (TO MASTER) TO BRING INTO DESIRED STATE.
POD RUNS ON WORKER, WHICH IS CONTROLLED BY MASTER.

KUBERNETES ARCHIETECTURE:
KUBERNETES IS A CONTAINER ORCHESTRATION TOOL. ORCHESTRATION MEANS (CLUSTERING OF ANY NO OF CONTAINERS RUNNING ON DIFFERENT NETWORKS)
FIRST WE WILL CREATE A CLUSTER.

CLUSTER CAN BE OF THREE TYPES.

    1. 1 MASTER AND 1 WORKER.
    2. 1 MASTER AND MULTIPLE WORKERS
    3. MULTIPLE MASTERS AND MULTIPLE WORKERS

MASTER COMPONENTS (CONTROL PLANE):
    1. API SERVER
    2. ETCD 
    3. KUBE SCHEDULER
    4. CONTROLLER MANAGER

    • API-SERVER:  ALL THE COMPONENTS OF MASTER AND WORKER COMMUNICATES THROUGH API SERVER.  SO API SERVER IS THE POINT OF CONTACT.  IT LISTEN TO REQUESTS.
      WORKER COMMUNICATE WITH API SERVER THROUGH KUBELET.

    • ETCD: IT IS A DATABASE THAT STORES DATA IN KEY:VALUE STORAGE AND ALL THE INFORMATION OF PODS (METADATA LIKE IP’S OF PODS, NO OF CONTAINERS IN A POD etc ARE STORED IN ETCD. 
      ONLY API-SERVER CAN ACCESS ETCD. NO OTHER COMPONENT CAN DIRECTLY ACCESS ETCD. 

    • CONTROLLER MANAGER: IT IS RESPOSIBLE TO MAINTAIN THE BALANCE OF ACTUAL STATE AND DESIRED STATE. FOR EXAMPLE IF WE WANT 4 CONTAINERS IN A POD. 
      SO CONTROL MANAGER WILL ENSURE THAT 4 CONTAINERS MUST BE PROVIDED TO A POD.  AND ALL OF THIS INFORMATION IT GETS ABOUT ACTUAL STATE AND DESIRED STATE IS FROM ETCD VIA API-SERVER.
      LIKE CONTROL MANAGER WILL SEND REQUEST TO API-SERVER AND API-SERVER WILL SEND THAT REQUEST TO ETCD.  ETCD WILL THEN SEND THE REQUIRED INFORMATION BACK TO API-SERVER AND API-SERVER 
      WILL THAN SEND THAT REQUIRED INFORMATION TO CONTROLL MANAGER. CONTROL MANAGER CONTROLS ALL THE PROCESSES BETWEEN WORKER AND MASTER.

    • KUBE SHEDULER: WHEN USER MAKE REQUEST FOR THE CREATION OF PODS, KUBE-SCHEDULER WILL TAKE ACTION ON THESE REQUESTS. LIKE IF USER DID NOT MENTIONED IN WHICH WORKER NODE THE POD
      WILLL BE CREATED, SO KUBE SCHEDULER WILL BECOME RESPONSIBLE FOR FINDING BEST NODE FOR THAT PODTO RUN ON. IT SCHEDULE THE TASKS THAT ARE GIVEN TO IT VIA CONTROL MANAGER THROUGH
      API-SERVER. NOW API-SERVER WILL SEND ALL THE INFORMATION COLLECTED FROM ETCD AND CONTROLL MANAGER TO THE KUBE SCHEDULER. AND KUBE SCHEDULER WILL TAKE ACTION TO MAKE IT SURE THAT
      THE ACTUAL STATE IS EQUAL TO THE DESIRED STATE. FOR EXAMPLE IF A POD HAVE 4 CONTAINERS IN IT. AND THERE ARE CURRENTLY 3 CONTAINERS IN THE POD THAN KUBE SHEDULER WILL TAKE ACTION TO
      ENSURE THAT ACTUAL STATE EQUALS TO THE DESIRED STATE. 

WORKER COMPONENTS: 
   
    1. KUBE PROXY
    2. KUBELET
    3. POD
    4. CONTAINER ENGINE (IN OUR CASE ITS DOCKER) IT WORKS WITH KUBELET AND PULLS IMAGES. STOP/START CONTAINERS, EXPOSING CONTAINERS ON PORTS SPECIFIED IN MANIFEST.

    • POD: IT IS ATOMIC UNIT OF KUBERNETES OR SMALLEST PART OF KUBERNETES WHERE CONTAINERS WILL BE RUNNING. CONTAINERS CAN NOT RUN WITHOUT PODS.

    • KUBELET: IT CONTROLS PODS. IT IS THE AGENT RUNNING ON THE WORKER. CONTROL IN A SENCE THAT HOW MANY CONTAINERS WILL BE IN A POD FOR EXAMPLE WE HAVE 1 CONTAINER RUNNING IN A POD, 
      NOW WE WANT ANOTHER CONTAINER IN THE SAME POD, SO KUBELET WILL SEND REQUEST TO API-SERVER, API-SERVER WILL UPDATE THE REQUEST IN ETCD, THEN THAT REQUEST WILL BE SENT TO CONTROL
      MANAGER VIA API-SERVER, THEN CONTROL MANAGER WILL SEND THE REQUEST TO KUBE SCHEDULER VIA API-SERVER. AND HENCE 2ND CONTAINER WILL BE CREATED IN THE POD.
      SO ACTUAL STATE WAS 1 CONTAINER IN THE POD, BUT DESIRED WAS 2 CONTAINERS IN A POD, SO IN THAT WAY KUBELET CONTROL PODS VIA API-SERVER. ITS DEFAULT POST IS 10255. 

    • KUBE-PROXY: IT HANDLES THE NETWORKING BEYWEEN PODS, BECAUSE PODS CAN NOT COMMUNICATE DIRECTLY WITH EACH OTHER. KUBE-PROXY ASSIGNS IP TO POD. AS CONTAINER HAS NO IP ADDRESS,  
      IP ADDRESS IS ONLY ASSIGNED TO POD. FOR BEST PRACTICES THERE SHOULD BE ONLY 1 CONTAINER IN POD. WE CAN CREATE MORE CONTAINERS IN A POD, BUT CONTAINERS IN A POD ARE
      TIGHTLY COUPLED WITH EACHOTHER, LIKE IF 1 CONTAINER FAILS THAN OTHER CONTAINERS IN THE SAME POD WILL ALSO GOES DOWN. IF POD IS FAILED THAN IT CAN NOT BE CREATED AGAIN BUT
      NEW ONE WILL BE CREATED AND ALL THE CONTAINERS WILL ALSO BE CREATED IN IT BUT WITH NEW IP.
